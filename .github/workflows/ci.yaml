name: ci

on:
  push:
    branches: [master]
  release:
    types: [created]
  pull_request:
    branches: [master]

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    permissions:
      packages: write
      contents: read
      pull-requests: write
    outputs:
      api-image-tags: ${{ steps.container_meta.outputs.tags }}
      api-image-version: ${{ steps.container_meta.outputs.version }}
      migrations-image-tags: ${{ steps.container_migrations_meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3
        with:
          fetch-depth: 0

      - name: Container meta for main image
        id: container_meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a # tag=v4
        with:
          images: |
            ghcr.io/${{ github.repository }}

      - name: Container meta for migrations image
        id: container_migrations_meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a # tag=v4
        with:
          images: |
            ghcr.io/${{ github.repository }}-migrations

      - name: Container meta for the unit test image
        id: container_tests_meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a # tag=v4
        with:
          images: |
            ghcr.io/${{ github.repository }}-tests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # tag=v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # tag=v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # tag=v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ran first to avoid pushing failing images when running on master.
      - name: Run unit tests
        uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94 # tag=v3
        with:
          push: false
          load: true
          tags: ${{ steps.container_tests_meta.outputs.tags }}
          labels: ${{ steps.container_tests_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: unit-test

      # can't use `load` and `push` at the same time, so differentiate by whether its a PR or not
      - name: Build and push api image
        uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94 # tag=v3
        with:
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.container_meta.outputs.tags }}
          labels: ${{ steps.container_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push migrations image
        uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94 # tag=v3
        with:
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.container_migrations_meta.outputs.tags }}
          labels: ${{ steps.container_migrations_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: migrations

      - name: Copy unit test coverage reports from container
        env:
          UNIT_TEST_IMAGE: ${{ fromJson(steps.container_tests_meta.outputs.json).tags[0] }}
        run: |
          docker create --name=unit-test-container "${UNIT_TEST_IMAGE}"
          docker cp unit-test-container:/build/src/Vfps.Tests/coverage ./coverage

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@51cc3a756ddcd398d447c044c02cb6aa83fdae95 # tag=v1.3.0
        with:
          filename: coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "60 80"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@39c5b5dc7717447d0cba270cd115037d32d28443 # tag=v2.2.0
        if: ${{ github.event_name == 'pull_request' }}
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Save container images as tar archives
        if: ${{ github.event_name == 'pull_request' }}
        env:
          API_IMAGE: ${{ fromJson(steps.container_meta.outputs.json).tags[0] }}
          MIGRATIONS_IMAGE: ${{ fromJson(steps.container_migrations_meta.outputs.json).tags[0] }}
        run: |
          docker save "$API_IMAGE" -o /tmp/api-image.tar
          docker save "$MIGRATIONS_IMAGE" -o /tmp/migrations-image.tar

      - name: Upload container images
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # tag=v3.1.0
        with:
          name: container-image-artifacts
          path: |
            /tmp/migrations-image.tar
            /tmp/api-image.tar

  test-api-container:
    name: test api container
    runs-on: ubuntu-22.04
    needs:
      - build
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # tag=v2

      - name: Download container images
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v3.0.0
        with:
          name: container-image-artifacts
          path: /tmp

      - name: Load images
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          ls -lar /tmp
          docker load --input /tmp/migrations-image.tar
          docker load --input /tmp/api-image.tar
          docker image ls -a

      - name: Install grpcurl
        working-directory: /tmp
        env:
          GRPCURL_URL: https://github.com/fullstorydev/grpcurl/releases/download/v1.8.7/grpcurl_1.8.7_linux_x86_64.tar.gz
        run: |
          curl -LSs "$GRPCURL_URL" | tar xz && \
          mv ./grpcurl /usr/local/bin/grpcurl && \
          chmod +x /usr/local/bin/grpcurl && \
          grpcurl --version

      - name: Install ghz
        working-directory: /tmp
        env:
          GHZ_URL: https://github.com/bojand/ghz/releases/download/v0.110.0/ghz-linux-x86_64.tar.gz
        run: |
          curl -LSs "$GHZ_URL" | tar xz && \
          mv ./ghz /usr/local/bin/ghz && \
          chmod +x /usr/local/bin/ghz && \
          ghz --version

      - name: Start compose deployment
        env:
          VFPS_IMAGE_TAG: ${{ needs.build.outputs.api-image-version }}
        run: |
          echo "Using VFPS image tag ${VFPS_IMAGE_TAG}"
          docker compose -f docker-compose.yaml --profile=test up -d

      - name: Wait for the healthz endpoint to be ready
        run: |
          curl --fail --retry 5 --retry-all-errors --connect-timeout 30 --max-time 60 --retry-delay 10 http://127.0.0.1:8080/healthz

      - name: Create a namespace for testing
        run: |
          grpcurl \
            -plaintext \
            -import-path src/Vfps/ \
            -proto src/Vfps/Protos/vfps/api/v1/namespaces.proto \
            -d '{"name": "test", "pseudonymGenerationMethod": "PSEUDONYM_GENERATION_METHOD_SECURE_RANDOM_BASE64URL_ENCODED", "pseudonymLength": 32}' \
            127.0.0.1:8081 \
            vfps.api.v1.NamespaceService/Create

      - name: Create pseudonyms from random inputs
        run: |
          ghz -n 5000 \
            --cpus 1 \
            --insecure \
            --import-paths src/Vfps/ \
            --proto src/Vfps/Protos/vfps/api/v1/pseudonyms.proto \
            --call vfps.api.v1.PseudonymService/Create \
            -d '{"originalValue": "{{randomString 32}}", "namespace": "test"}' \
            127.0.0.1:8081

      - name: Print compose logs
        if: always()
        run: |
          docker compose --profile=test -f docker-compose.yaml logs
          docker compose --profile=test down --volumes --remove-orphans

  test-migrations-container:
    name: test migrations container
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3

      - name: Download container images
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v3.0.0
        with:
          name: container-image-artifacts
          path: /tmp

      - name: Load migrations image
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          docker load --input /tmp/migrations-image.tar
          docker image ls -a

      - name: Install .NET
        uses: actions/setup-dotnet@c0d4ad69d8bd405d234f1c9166d383b7a4f69ed8 # tag=v2
        with:
          dotnet-version: "7.0.x"
          include-prerelease: true

      - name: Run migrations tests
        env:
          VFPS_MIGRATIONS_IMAGE: ${{ needs.build.outputs.migrations-image-tags }}
        run: dotnet test src/Vfps.IntegrationTests --configuration=Release -l "console;verbosity=detailed"

  sign-images:
    name: sign images
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' }}
    needs:
      - build
      - test-migrations-container
      - test-api-container
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # tag=v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 # tag=v2.6.0

      - name: Sign api image
        env:
          COSIGN_EXPERIMENTAL: "true"
          IMAGES: ${{ needs.build.outputs.api-image-tags }}
        run: |
          while read -r image; do
            if [[ $image = quay.io/* ]]; then
              echo "Skipping '$image' hosted on quay.io"
              continue
            fi
            echo "Signing '$image' using keyless approach"
            cosign sign "$image"
          done <<< "$IMAGES"

      - name: Sign migrations image
        env:
          COSIGN_EXPERIMENTAL: "true"
          IMAGES: ${{ needs.build.outputs.migrations-image-tags }}
        run: |
          while read -r image; do
            if [[ $image = quay.io/* ]]; then
              echo "Skipping '$image' hosted on quay.io"
              continue
            fi
            echo "Signing '$image' using keyless approach"
            cosign sign "$image"
          done <<< "$IMAGES"
